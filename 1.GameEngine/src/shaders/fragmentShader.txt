// FRAGMENT SHADER
#version 330 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in vec3 lightPosition;

out vec4 out_Colour;

uniform sampler2D textureSampler;
uniform vec3 lightColour;
uniform float shineDamper;
uniform float reflectivity;

void main(void)
{
	
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);
	
	vec3 unitVectorToCam = normalize(toCameraVector);
	vec3 toWorldVector = -unitLightVector;
	vec3 reflectedLightDirection = reflect(toWorldVector,unitNormal);
	
	float nDot1 = dot(unitNormal, unitLightVector);
	float brightness = max(nDot1, 0.0);
	vec3 diffuse = brightness * lightColour;
	
	float specularFactor = dot(unitVectorToCam,reflectedLightDirection);
	specularFactor = max(specularFactor, 0.0);
	float dampedFactor = pow(specularFactor, shineDamper);	//lowers the low val, does not effect high val
	
	vec3 finalSpecular = dampedFactor * lightColour;
	
	out_Colour = vec4(diffuse, 1.0) *  texture(textureSampler, pass_textureCoords) + vec4(finalSpecular,1.0);
	//out_Colour = texture(textureSampler, pass_textureCoords);
	
	

}